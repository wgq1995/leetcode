# 题目描述
    现在你总共有 n 门课需要选，记为 0 到 n-1。
    在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]
    给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？
# 示例
    输入: 2, [[1,0]] 
    输出: true
    解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
    
    输入: 2, [[1,0],[0,1]]
    输出: false
    解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。
# 思路
    将关系存在字典里，key为课程，value为它依赖的关系
    每次将没有依赖的课程pop出来，如果无法pop就返回false
# 代码
```
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        dic = {}
        for i in range(numCourses):
            dic[i] = set()
        for p in prerequisites:
            dic[p[0]].add(p[1])
        while dic:
            cur = set()
            for k, v in dic.items():
                if not v:
                    cur.add(k)
            if not cur:
                return False
            for k in cur:
                dic.pop(k)
            for v in dic.values():
                v.difference_update(cur)
        return True
```
